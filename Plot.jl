using Plots

using JLD



# plot()
#
# G = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]
# w = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.9, 1.0]
# for i = 1:9
#
#     for j = 1:11
#         plot!(
#             (1:600000) * 0.0005,
#             real(load(
#             "/home/kyle/GPE-Data/6-13-20/PR_L=233_0.0005_600000_gauss-1_avg_SOC/PR_L=233_g=$(G[j])_W=$(w[i])_gauss-1_avg.jld", "data"
#             )),
#             legend = :topleft,
#             title = "PR vs. Time SOC, L=144, Variance = 1, W=$(w[i]), del_t=0.005",
#             xlabel = "Time",
#             ylabel = "PR",
#             label = "g = $(G[j])",
#             xaxis = :log,
#             yaxis = :log,
#             )
#         end
#      savefig("PR-SOC_W=$(w[i])_100")
#      plot()
# end

# plot()
# j=11
#
# G = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]
# w = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
#
# for i = 1:10
#     plot!(
#          (1:600000) * 0.0005,
#          real(load(
#          "/home/kyle/GPE-Data/6-13-20/Spread_L=233_0.0005_600000_gauss-1_avg_SOC/Spread_L=233_g=$(G[j])_W=$(w[i])_gauss-1_avg.jld", "data"
#          )),
#          legend = :topleft,
#          title = "Spread vs. Time SOC, L=233, Variance = 1, g=$(G[j]), del_t=0.0005",
#          xlabel = "Time",
#          ylabel = "PR",
#          label = "W = $(w[i])",
#          xaxis = :log,
#          yaxis = :log,
#          )
# end
# savefig("Spread-SOC_g=$(G[j])_100")

using DataFrames
using GLM

# Plots Linear Fit and Curves
#Spread

#G = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]
# # #w = [0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66]
# # #w = [1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2]
#w = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.44, 0.46, 0.48, 0.52, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.61, 0.62, 0.63, 0.64, 0.65, 0.67]
# #
# leng = length(w)
# len = length(G)

function dat2csv(dat_path::AbstractString, csv_path::AbstractString)
    open(csv_path, write=true) do io
        for line in eachline(dat_path)
            join(io, split(line), ',')
            println(io)
        end
    end
    return csv_path
end
#
# time_1 =
# [
#   0.8900000000
#   1.7800000000
#   2.6700000000
#   3.5600000000
#   4.4500000000
#   5.3400000000
#   6.2300000000
#   7.1200000000
#   8.0100000000
#   8.9000000000
#   9.7900000000
#  10.6800000000
#  11.5700000000
#  12.4600000000
#  13.3500000000
#  14.2400000000
#  15.1300000000
#  16.0200000000
#  16.9100000000
#  17.8000000000
#  18.6900000000
#  19.5800000000
#  20.4700000000
#  21.3600000000
#  22.2500000000
#  23.1400000000
#  24.0300000000
#  24.9200000000
#  25.8100000000
#  26.7000000000
#  27.5900000000
#  28.4800000000
#  29.3700000000
#  30.2600000000
#  31.1500000000
#  32.0400000000
#  32.9300000000
#  33.8200000000
#  34.7100000000
#  35.6000000000
#  36.4900000000
#  37.3800000000
#  38.2700000000
#  39.1600000000
#  40.0500000000
#  40.9400000000
#  41.8300000000
#  42.7200000000
#  43.6100000000
#  44.5000000000
#  45.3900000000
#  46.2800000000
#  47.1700000000
#  48.0600000000
#  48.9500000000
#  49.8400000000
#  50.7300000000
#  51.6200000000
#  52.5100000000
#  53.4000000000
#  54.2900000000
#  55.1800000000
#  56.0700000000
#  56.9600000000
#  57.8500000000
#  58.7400000000
#  59.6300000000
#  60.5200000000
#  61.4100000000
#  62.3000000000
#  63.1900000000
#  64.0800000000
#  64.9700000000
#  65.8600000000
#  66.7500000000
#  67.6400000000
#  68.5300000000
#  69.4200000000
#  70.3100000000
#  71.2000000000
#  72.0900000000
#  72.9800000000
#  73.8700000000
#  74.7600000000
#  75.6500000000
#  76.5400000000
#  77.4300000000
#  78.3200000000
#  79.2100000000
#  80.1000000000
#  80.9900000000
#  81.8800000000
#  82.7700000000
#  83.6600000000
#  84.5500000000
#  85.4400000000
#  86.3300000000
#  87.2200000000
#  88.1100000000
# ]
#
#
#
# spread_1 =
#
# [1.9969670371
#
# 4.2675857511
#
# 6.9521992877
#
# 10.2151368022
#
# 14.3249821575
#
# 19.1511462402
#
# 24.6436935644
#
# 30.8862934892
#
# 37.8665644928
#
# 45.5223908702
#
# 53.8539795287
#
# 62.8678841190
#
# 72.4966530969
#
# 82.6627864629
#
# 93.3622709095
#
# 104.6137054032
#
# 116.3990144115
#
# 128.7317380684
#
# 141.6630041981
#
# 155.1619077072
#
# 169.1470301226
#
# 183.6082131410
#
# 198.5462388325
#
# 213.9059438179
#
# 229.6817759303
#
# 245.9295299775
#
# 262.6350548231
#
# 279.7661140887
#
# 297.3854771525
#
# 315.5313359970
#
# 334.1538995659
#
# 353.2462836491
#
# 372.8239213738
#
# 392.8255964995
#
# 413.2140248629
#
# 434.0516692533
#
# 455.3958636109
#
# 477.2600118476
#
# 499.6752287779
#
# 522.6729434359
#
# 546.2282386717
#
# 570.2926094726
#
# 594.8621586592
#
# 619.9480232291
#
# 645.5287491469
#
# 671.6058882562
#
# 698.2191119154
#
# 725.3650617561
#
# 752.9660445700
#
# 780.8923154818
#
# 808.9675823412
#
# 836.9649971425
#
# 864.6667802487
#
# 891.9838661408
#
# 918.9821985156
#
# 945.8116145000
#
# 972.6473904316
#
# 999.5941039171
#
# 1026.5689490478
#
# 1053.3480512170
#
# 1079.7613939584
#
# 1105.8149075593
#
# 1131.6590947862
#
# 1157.4480123867
#
# 1183.2014685167
#
# 1208.8825702826
#
# 1234.6307899429
#
# 1260.7616588965
#
# 1287.3441126703
#
# 1313.7099724550
#
# 1338.5924019193
#
# 1361.0403039403
#
# 1381.1819767944
#
# 1399.8707960020
#
# 1417.5453736911
#
# 1433.7086017603
#
# 1447.7246425762
#
# 1459.8083362532
#
# 1470.7733893875
#
# 1480.9897072109
#
# 1490.2095338406
#
# 1498.4870077791
#
# 1506.5602774062
#
# 1514.8037165470
#
# 1522.2542023291
#
# 1527.4899302196
#
# 1530.4165840406
#
# 1532.3667068990
#
# 1534.1860601353
#
# 1534.9903411106
#
# 1533.5910166737
#
# 1530.7054827531
#
# 1528.4430859621
#
# 1527.4741900553
#
# 1526.1684989417
#
# 1523.0703358131
#
# 1518.5977279767
#
# 1513.3496058976
#
# 1506.7553693343]
#
#
# spread_3 =
#    [1.9871601853
#    4.1761244032
#    6.6819964635
#    9.4910055782
#   12.6329544724
#   15.9657584937
#   19.2989799808
#   22.5202002842
#   25.6510495682
#   28.7797804357
#   32.0136554348
#    35.3466107587
#    38.6769401618
#    41.9171510699
#    44.9622567139
#    47.7594559185
#    50.4075724051
#    53.0346028616
#    55.8319128452
#    59.0695456420
#    62.8731101420
#    67.2391558581
#    72.1118628944
#    77.3602892737
#    82.8455872487
#    88.4272377347
#    94.0016662687
#    99.5696958034
#   105.1340379354
#   110.6911225180
#   116.2919935186
#   121.9907787039
#   127.8229770064
#   133.7527127394
#   139.6635582403
#   145.4936630202
#   151.2495803040
#   156.8998603320
#   162.4494577269
#   168.0190673816
#   173.7181490181
#   179.6080224768
#   185.7493560492
#   192.1659664400
#   198.8397144362
#   205.7655844981
#   212.9669620003
#   220.4082215754
#   228.0028906918
#   235.7090699463
#   243.4837945865
#   251.3182526565
#   259.2311598586
#   267.1505053519
#   275.0680475859
#   283.0507964201
#   291.0592955719
#   299.0194237269
#   306.9330584638
#   314.8377439444
#   322.6915603390
#   330.4603116837
#   338.2101027202
#   345.9911822177
#   353.8575530454
#   361.8680903327
#   370.0413532784
#   378.4349969341
#   387.1011259614
#   396.0022319512
#   405.0658644420
#   414.2164364818
#   423.4190179618
#   432.7194874138
#   442.1426775830
#   451.6509059105
#   461.1957433316
#   470.7587963639
#   480.3479534266
#   489.8995565830
#   499.3034848073
#   508.5304929155
#   517.5844799321
#   526.4605660374
#   535.2279617801
#   544.0022594811
#   552.8628027767
#   561.8044055139
#   570.7938722226
#   579.8441397128
#   588.9154468354
#   597.9158145527
#   606.7610039512
#   615.4010601857
#   623.9158436118
#   632.4834267020
#   641.2325675243
#   650.1761122790
#   659.2391488315]
#
# spread_5 =
# [
#  1.9679138526
#  4.0033893017
#  6.2193829845
#  8.5227925058
# 10.8419317186
# 13.0213049920
# 14.8879167215
# 16.3066782733
# 17.2626223630
# 17.9086004329
# 18.3553295581
#  18.7921389897
# 19.5624408485
#  20.8666990299
#  22.7396905968
#  25.0772824440
#  27.6848177580
#  30.3326946229
#  32.7922942489
#  34.9552444813
#  36.7451405225
#  38.1593977356
#  39.2535662682
#  39.9632105660
#  40.3368848087
#  40.5870473680
#  40.9459466693
#  41.7243037655
#  43.0126803975
#  44.5688175350
#  46.2337101851
#  47.9515257874
#  49.6262803457
#  51.1210749859
#  52.3670648429
#  53.3388223144
#  53.9665616707
#  54.3554211887
#  54.6468918153
#  54.9951916141
#  55.5505847959
#  56.2942755334
#  57.3500669131
#  58.9040281345
#  60.7819208988
#  62.7064210058
#  64.5240893035
#  66.1149359686
#  67.5142526094
#  68.7952204985
#  70.0619907245
#  71.3450044234
#  72.5825553828
#  73.8232293036
#  75.1913639559
#  76.7467195432
#  78.5414115536
#  80.5731277205
#  82.6723979314
#  84.7198471348
#  86.7170194272
#  88.6326369410
#  90.5053896024
#  92.4247919710
#  94.3998142172
#  96.4470164454
#  98.4899804500
# 100.470009842
# 102.485370115
# 104.596597577
# 106.753702617
# 108.887138785
# 110.900907874
# 112.741680806
# 114.519809797
# 116.297082306
# 118.112448508
# 120.030588247
# 122.079293921
# 124.233745913
# 126.469553209
# 128.774003800
# 131.092345307
# 133.390839303
# 135.639975721
# 137.775808172
# 139.737271956
# 141.554877534
# 143.273501929
# 144.999330575
# 146.832516640
# 148.787655413
# 150.870322319
# 153.133442857
# 155.539865862
# 158.041972838
# 160.576651656
# 163.017762623
# 165.292290819
# ]
#
ts = (1:300000)/2000
g = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]
W = [0.2, 0.3, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.62, 0.64, 0.7, 0.8, 0.9, 1.1, 1.2, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.2, 2.3, 2.4, 2.6, 2.7, 2.8, 2.9, 2.0, 3.1, 3.2]
# z = [1.557

using DelimitedFiles



# plot()
# #
# for i = 1:length(g)
#     n = g[i]
# #
#     array_n= Float64[]
# #
# #     for j = 1:length(W)
# #
# #         array = try
# #             real(load("/home/kyle/GPE-Data/9-30-20/Spread_L=89_g=$(g[i])_W=$(W[j])_gauss-1_avg_SOC.jld", "data"))
# #         catch
# #             zeros(300000)
# #         end
# #         array_ = array .- array[1]
# # # # # spread_1_ = spread_1 .- 1
# # # # # spread_3_ = spread_3 .- 1
# # # # # spread_5_ = spread_5 .- 1
# # # #
# # # # #plot(time_1, spread_1_, label = "Jed", legend = :bottomright, title = "</delta^2> g=0 W=0.1 L=89", xaxis = :log, yaxis = :log,)

             # datas = DataFrame(A = ts[100000:299997], B = array_[100000:299997])
             # linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
             #
             # m = coef(linear)[2]
             # b = coef(linear)[1]
             # #plot(ts[2:299997], array[2:299997], xaxis = :log, yaxis = :log, label = " slope = $(m)", linestyle = :dash, legend = :bottomright, size = (1200, 1000), titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
             # #plot!(ts, (exp(b)*(ts).^m), xaxis = :log, yaxis = :log, label = " slope = $(m)", linestyle = :dash,size = (1200, 1000), titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
             # append!(array_n, m)
             #
# #
# #
# # # # #
# # # # # datas_J = DataFrame(A = time_3[10:50], B = spread_3_[10:50])
# # # # # linear_J = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
# # # # #
# # # # # m_J = coef(linear_J)[2]
# # # # # b_J = coef(linear_J)[1]
# # # #
# # fib(n) = n < 2 ? n : fib(n-1) + fib(n-2)
# # # # # #
# #
# # # #plot!(ts[2:299997], (exp(b)*(ts[2:299997]).^m), label = "slope = $(m)",size = (1200, 1000), titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
# # # # # #
# # # # # # #, xaxis = :log, yaxis = :log)
# # # # # #
# # # # # #plot(time_1, spread_5, size = (1200, 1000), label = "Jed", title = "</delta^2> g=0 W=0.5 L=89")
# # #          plot!(ts, array_[2:299998], label = "W = $(W[j])", size = (1200, 1000), title = "<\\delta r^{2}> g = $(g[i])", legend = :topleft, xaxis = :log, yaxis = :log)
# # # #
# #     end
# #     # print(array_n)
# #     writedlm("/home/kyle/GPE-Data/10-31-20/Spread_2-z_g=$(n).txt", array_n)
# # end
#


# plot!()
#
# # function dat2csv(dat_path::AbstractString)
#     base, ext = splitext(dat_path)
#     ext == ".dat" ||
#         throw(ArgumentError("file name doesn't end with `.dat`"))
#     return dat2csv(dat_path, "$base.csv")
# end

# plot(size = (1500, 1000))
#
# for i = 1:1
#
#
#     for j = 2:3
#         ts = (2:300000) * 0.0005
#         array = real(load("/home/kyle/GPE-Data/9-18-20/Spread_L=89_g=0.0_W=$(w[j])_gauss-1_avg_SOC.jld", "data"))
#         array_ = array .- array[1]
#
#         plot!(size = (1500, 1000), ts, array_[2:300000], title ="<\\delta r^{2} > Plot with Linear Fit for g = $(G[i])", xlabel = "time", ylabel = "<\\delta r^{2}>", legend = :topleft, label = "W = $(w[j])", xaxis= :log, yaxis= :log, titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
#         datas = DataFrame(A = ts[60000:100000], B = array_[60000:100000])
#         linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
#         m = coef(linear)[2]
#         b = coef(linear)[1]
#         plot!(ts[10000:299998], (exp(b)*(ts[10000:299998]).^m), label = "2/z = $(m)", linestyle = :dash, titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
#         savefig("/home/kyle/GPE-Plots/9-17-20/2-z_fit_g=$(G[i])_W=$(w[j])_9-17-20")
#         plot!(size = (1500, 1000), ts, array_[2:599999], title ="<\\delta r^{2} > Plot with Linear Fit for g = $(G[i])", xlabel = "time", ylabel = "<\\delta r^{2}>", legend = :topleft, label = "W = $(w[j])", xaxis= :log, yaxis= :log, titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
#     #
#
#     end

# array = real(load("/home/kyle/GPE-Data/9-18-20/Spread_L=89_g=0.0_W=0.1_gauss-1_avg_SOC.jld", "data"))



    # plot(size = (1500, 1000))
    #
    # for j = 11:21
    #
    #     ts = (2:599999) * 0.0005
    #     array = real(load("/home/kyle/GPE-Data/9-17-20/Spread_L=233_g=$(G[i])_W=$(w[j])_gauss-1_avg_SOC.jld", "data"))
    #     array_ = array .- array[1]
    #     plot!(size = (1500, 1000), ts, array_[2:599999], title ="<\\delta r^{2} > Plot with Linear Fit for g = $(G[i])", xlabel = "time", ylabel = "<\\delta r^{2}>", legend = :topleft, label = "W = $(w[j])", xaxis= :log, yaxis= :log, titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
    #     datas = DataFrame(A = ts[60000:599998], B = array_[60000:599998])
    #     linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
    #
    #     m = coef(linear)[2]
    #     b = coef(linear)[1]
    #     plot!(ts[20000:599998], (exp(b)*(ts[20000:599998]).^m), label = "slope = $(m)", linestyle = :dash,size = (1200, 1000), titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
    # end
    # #
    # savefig("/home/kyle/GPE-Plots/9-9-20/<\\delta r^2>_SOC_subtr_Lin_Fit_g=$(G[i])_II_8-27-20_Fine")

#     plot(size = (1500, 1000))
#
#     for j = 15:leng
#
#         ts = (2:599999) * 0.0005
#         array = real(load("/home/kyle/GPE-Data/9-5-20/Spread_L=144_g=$(G[i])_W=$(w[j])_gauss-1_avg_SOC.jld", "data"))
#         array_ = array .- array[1]
#         plot!(size = (1500, 1000), ts, array_[2:599999], title ="<\\delta r^{2} > Plot with Linear Fit for g = $(G[i])", xlabel = "time", ylabel = "<\\delta r^{2}>", legend = :topleft, label = "W = $(w[j])", xaxis= :log, yaxis= :log, titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
#         datas = DataFrame(A = ts[60000:599998], B = array_[60000:599998])
#         linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
#
#         m = coef(linear)[2]
#         b = coef(linear)[1]
#         plot!(ts[20000:599998], (exp(b)*(ts[20000:599998]).^m), label = "slope = $(m)", linestyle = :dash, size = (1200, 1000), titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
#     end
#
#     savefig("/home/kyle/GPE-Plots/9-9-20/<\\delta r^2>_SOC_subtr_Lin_Fit_g=$(G[i])_III_8-27-20_Fine")
#
#     plot(size = (1500, 1000))
#


#end



## PR
# for j = 1:5
#
#     ts = (2:599999) * 0.0005
#     array = real(load("/home/kyle/GPE-Data/8-21-20/PR_L=144_g=$(G[j])_W=$(w)_gauss-1_avg_SOC.jld", "data"))
#     array_ = array .- array[1]
#     plot!(ts, array_[2:599999], title ="PR Plot with Linear Fit for W = $(w[i])", xlabel = "time", ylabel = "PR", legend = :topleft, label = "g = $(G[j])", xaxis= :log, yaxis= :log)
#     datas = DataFrame(A = ts[20000:200000], B = array_[20000:200000])
#     linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
#
#     m = coef(linear)[2]
#     b = coef(linear)[1]
#     plot!(ts[2000:599998], (exp(b)*(ts[2000:599998]).^m), label = "slope = $(m)", linestyle = :dash)
# end
#
# savefig("/home/kyle/GPE-Plots/8-21-20/PR_SOC_subtr_Lin_Fit_W=$(w)_I_8-21-20")
#
# plot()
#
# for j = 5:len
#
#     ts = (2:599999) * 0.0005
#     array = real(load("/home/kyle/GPE-Data/8-21-20/PR_L=144_g=$(G[j])_W=$(w)_gauss-1_avg_SOC.jld", "data"))
#     array_ = array .- array[1]
#     plot!(ts, array_[2:599999], title ="PR Plot with Linear Fit for W = $(w[i])", xlabel = "time", ylabel = "PR", legend = :topleft, label = "g = $(G[j])", xaxis= :log, yaxis= :log)
#     datas = DataFrame(A = ts[20000:200000], B = array_[20000:200000])
#     linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
#
#     m = coef(linear)[2]
#     b = coef(linear)[1]
#     plot!(ts[2000:599998], (exp(b)*(ts[2000:599998]).^m), label = "slope = $(m)", linestyle = :dash)
# end
#
# savefig("/home/kyle/GPE-Plots/8-21-20/PR_SOC_subtr_Lin_Fit_W=$(w)_II_8-21-20")




##Reading out the exponents
#
# G = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]
# w = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
#
# j = 11
# for i = 1:10
#
#     ts = (1:600000) * 0.0005
#     array = real(load("/home/kyle/GPE-Data/6-13-20/Spread_L=233_0.0005_600000_gauss-1_avg_SOC/Spread_L=233_g=$(G[j])_W=$(w[i])_gauss-1_avg.jld", "data"))
#     array_ = array = array[1]
#
#     datas = DataFrame(A = ts[20000:200000], B = array_[20000:200000])
#     linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
#
#     m = coef(linear)[2]
#     b = coef(linear)[1]
#     plot!(ts[2000:600000], (exp(b)*(ts[2000:600000]).^m), label = "slope = $(m)")
# end
#

#

## g vs. W

# G = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]
# w = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
# slope_del = []
# slope_PR = []
# plot()
#
# for i = 21
#     for j = 1:10
#         ts = (2:299999) * 0.0005
#         array = real(load("/home/kyle/GPE-Data/8-13-20/Spread_L=89_g=$(G[i])_W=$(w[j])_gauss-1_avg_SOC.jld", "data"))
#         array_ = array .- array[1]
#         datas = DataFrame(A = ts[20000:200000], B = array_[20000:200000])
#         linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
#
#         m = coef(linear)[2]
#
#         append!(slope_del, m)
#     end
#
#     plot(w, slope_del, title = "Long Time Power Law Fits of <\\delta r^{2} > for g = $(G[i])", xlabel = "W", ylabel = "Power Law Fit")
#
#     savefig("/home/kyle/GPE-Plots/8-13-20/<\\delta r^2>_SOC_W_vs_Lin_Fit_g=$(G[i])_8-13-20")
#
#     for j = 1:10
#         ts = (2:299999) * 0.0005
#         array = real(load("/home/kyle/GPE-Data/8-13-20/PR_L=89_g=$(G[i])_W=$(w[j])_gauss-1_avg_SOC.jld", "data"))
#         array_ = array .- array[1]
#         datas = DataFrame(A = ts[20000:200000], B = array_[20000:200000])
#         linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
#
#         m = coef(linear)[2]
#         append!(slope_PR, m)
#     end
#
#     plot(w, slope_PR, title = "Long Time Power Law Fits of PR for g = $(G[i])", xlabel = "W", ylabel = "Power Law Fit")
#
#     savefig("/home/kyle/GPE-Plots/8-13-20/PR_SOC_W_vs_Lin_Fit_g=$(G[i])_8-13-20")
# end

## Self Trapping Phase Diagram

##g=0 data outputs 2/z vs. W data


#
# ### Diffusive Phase Diagram
# plot()
#
# G = []
# w = [0.0, 0.1, 0.2, 0.2, 0.3, 0.4, 0.5, 0.5, 0.6, 0.7, 0.8, 0.9]
#
# scatter(w, G, title = "Phase Diagram of PR Self Trapping Boundary", xlabel = "W", ylabel = "g\\ _{st} (W)", label = "g\\ _{st} (W)", legend = :bottomright)
# datas = DataFrame(B = G, A = w .+ 3.9)
# linear = glm(@formula(B ~ A), datas, Normal(), IdentityLink())
# m = coef(linear)[2]
# plot!(w, m*w .+ 3.9, label = "g\\ _{st} (W)=g\\ _{st} (0)+$(m)*W")

# w = [ 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
#
# i=1
#
#
# for j = 1:7
#
#         ts = (2:299999) * 0.0005
#         array = real(load("/home/kyle/GPE-Data/8-13-20/Spread_L=89_g=$(G[i])_W=$(w[j])_gauss-1_avg_SOC.jld", "data"))
#         array_ = array .- array[1]
#         plot!(size = (1500, 1000), ts, array_[2:299999], title ="<\\delta r^{2} > Plot with Linear Fit for g = $(G[i])", xlabel = "time", ylabel = "<\\delta r^{2}>", legend = :topleft, label = "W = $(w[j])", xaxis= :log, yaxis= :log, titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
#         #datas = DataFrame(A = ts[60000:200000], B = array_[60000:200000])
#         #linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
#         #m = coef(linear)[2]
#         #b = coef(linear)[1]
#         #plot!(ts[2000:299996], (exp(b)*(ts[2000:299996]).^m), label = "slope = $(m)", linestyle = :dash, titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
# end
# plot!()

## Plot of 2/z vs. W for 0<g<10

# plot(size = (1500, 1000))
#
# for i = 10:len
#
#     slope = []
#
#     for j = 1:leng
#
#
#         ts = (2:599999) * 0.0005
#         array = real(load("/home/kyle/GPE-Data/9-9-20/Spread_L=144_g=$(G[i])_W=$(w[j])_gauss-1_avg_SOC.jld", "data"))
#         array_ = array .- array[1]
#
#         datas = DataFrame(A = ts[115000:499998], B = array_[115000:499998])
#         linear = glm(@formula(log(B) ~ log(A)), datas, Normal(), IdentityLink())
#         m = coef(linear)[2]
#         b = coef(linear)[1]
#         append!(slope, m)
#
#
#     end
#
#     scatter!(size = (1500, 1000), w, slope, title ="2/z vs. W", xlabel = "W", ylabel = "2/z", legend = :topright, label = "g = $(G[i])", titlefontsize= 20 , tickfontsize = 17, legendfontsize = 17, guidefontsize = 17)
# end
#
# savefig("/home/kyle/GPE-Plots/9-12-20/2-z_vs_W_ALL_9-15-20_II")

# plot()
#
# w = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.44, 0.46, 0.48, 0.52, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.61, 0.62, 0.63, 0.64, 0.65, 0.67]
# z = [1.86, 1.71, 1.54, 1.59, 1.32, 1.32, 1.33, 1.410923, 1.42902, 1.44902, 1.3824, 1.34145, 1.3059, 1.3049, 1.3032, 1.2980, 1.2971, 1.2978, 1.2988, 1.3013, 1.3027, 1.3043, 1.3063, 1.3088, 1.3153]
# W = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.45, 0.52, 0.54, 0.56, 0.58 ]
# j = [1.9340420453039655, 1.8843361849504179, 1.8573282830902067, 1.7600035739910087, 1.4032822386223944, 1.4037189479944043, 1.5376214513164566, 1.4947037912002374,1.4825914277182997, 1.5682191492157314, 1.3909675716278689, 1.3840466164821263, 1.3675658421537926,1.3734087134054234  ]
# scatter(w ,z, label = "Kyle's Fits")
# scatter!(W, j, label = "Jed's Fits")
#
# savefig("/home/kyle/GPE-Plots/9-17-20/Jed's_Fits_vs_Kyle's_Fits_9-17-20")

## 2/z Phase Diagram

# g_0 = [1.5575300149357008, 1.5071157309815375, 1.4448835127257438, 1.3860534299931815, 1.3437061600293265, 1.3176765345698893, 1.306812682837727, 1.3058177759075396, 1.3029135192059917, 1.2996989870547695, 1.2987002600528104, 1.3001530062737972, 1.302703142790495, 1.3050689813897407, 1.3068742606074202, 1.3082064618523188, 1.3091808062735262, 1.309982546132545, 1.3107464201330647, 1.3115589736605522]
#
# g_05 = [1.5054299459702916, 1.4424688916876374, 1.3826397440861158, 1.3392490433448874, 1.312720912712802, 1.301717501727759, 1.3000591096451786, 1.2969412105517892, 1.293765013372555, 1.2928713301826134, 1.2944041771928259, 1.2970477779478464, 1.2995664470213053, 1.3016360217814607, 1.3033232781105326, 1.3046805782493334, 1.3058907724875939, 1.307116044120616, 1.3084361581968593]
#
# g_1 = [1.5522696508205207, 1.4990898507552792, 1.4343769568589342, 1.372611154062521, 1.3276312181490098, 1.2999970348669772, 1.2874961064470092, 1.2837028039777338, 1.2802271602187196, 1.277312028955172, 1.2768893656494813, 1.2788609895482574, 1.2819064841356393, 1.284915260742449, 1.2876842530670314, 1.2902082845657747, 1.2924002413201603, 1.2944477791989732, 1.2966006173799742, 1.2989703551411924]
#
# g_15 = [1.4869496646715097, 1.4189574075692288, 1.355162674322595, 1.3082586371745542, 1.2785791614397448, 1.263568335656234, 1.2567745368481853, 1.2531990243519395, 1.250909880831278, 1.2513445632017965, 1.2541337853567158, 1.2579497223883007, 1.2619438253157276, 1.266088327944519, 1.2702561711144285, 1.274137807595325, 1.2779351304641193, 1.2819235696879039, 1.2861215473688745]
#
# g_20 = [1.4682395602927159, 1.3972383563437907, 1.3283654660236446, 1.2805260653397679, 1.2541511998534076, 1.238428629843556, 1.230973616704465, 1.2279470762755287, 1.226423870327144, 1.2276445439293904, 1.2311362039431055, 1.2358534203356384, 1.2408634704692414, 1.2467004754290185, 1.2526421010462345, 1.2581043025618937, 1.2632694305752554, 1.2691501196020754, 1.2751508962778813]
#
# g_25 = [1.4387761742222933, 1.364701795526372, 1.2978402376564067, 1.2525734160050936, 1.2310764564535401, 1.2172510203916629, 1.2079384945998997, 1.2048728723384345, 1.2039384504007167, 1.2059944032311378, 1.2105294580065027, 1.2145108464049401, 1.2196344588955976, 1.2261397504951268, 1.2325111514019635, 1.2391392951912048, 1.246929292319169, 1.2543997547105215, 1.2616277777961984]
#
# g_30 = [1.4110582798116025, 1.3379749756266759, 1.2697107459277681, 1.2291115267306636, 1.2126866581128217, 1.2026508001509173, 1.1933861464023645, 1.1901422554627534, 1.1889888096659742, 1.1886177058221372, 1.1903433476240872, 1.1947397927050658, 1.2012045989396405, 1.2078232165962302, 1.2156930643451374, 1.2237857521970963, 1.231666179778925, 1.2397655764741344, 1.2480015564000508]
#
# g_35 = [1.382967876809954, 1.3103039216242813, 1.2463739328550403, 1.2084882957471432, 1.193724388512152, 1.18341589886147, 1.1741639870353044, 1.1696149681200998, 1.1664589154907796, 1.1662169834270841, 1.1690570450532765, 1.1742279556671147, 1.1806723759187994, 1.1879378597116546, 1.1961104150106012, 1.204438975182811, 1.213394637047673, 1.2234162304936183, 1.2339164715221809]
#
# g_40 = [1.3622105688053454, 1.2894726087848132, 1.2272953891948286, 1.1905368544383186, 1.1771894283331146, 1.1671420705013518, 1.1547885173503978, 1.150717197402796, 1.147427914575154, 1.1470909534964302, 1.1487415227577087, 1.1527238865534724, 1.1585315451946592, 1.1665803814649194, 1.1763588856476117, 1.187546875635893, 1.198490516305443, 1.2093997698853218, 1.220251459379713]
#
# g_45 = [1.3457393011241814, 1.2701306656815354, 1.2079987964548513, 1.1717625808902665, 1.1588466933867465, 1.1496109729976747, 1.1388257332164422, 1.133175536619528, 1.1298973910362853, 1.1291615541610245, 1.1319881724668452, 1.1373050473576176, 1.1450213230286184, 1.15446459178222, 1.1637275710175539, 1.1759282299803349, 1.1873278458990488, 1.2001519808354701, 1.2127884796766626]
#
#
# g_50 = [1.3443973068647923, 1.265076307201487, 1.202034200941461, 1.166528076164531, 1.1523323721476004, 1.1410049130517694, 1.128181865875004, 1.1244556270216064, 1.1225281872987432, 1.1221758948926999, 1.1229964112492858, 1.127768215633971, 1.1344285057184489, 1.143591253806009, 1.1561541916595037, 1.1668042902472293, 1.1803163688841292, 1.1926991448204838, 1.206510296224357]
#
#
# g_55 = [1.3419364250370613, 1.2626300478363066, 1.2001927723119843, 1.1684268356111995, 1.149932761717294, 1.1362447926520816, 1.1231179617320048, 1.119008515201683, 1.117601133590725, 1.1184475262485545, 1.1225262869102999, 1.1276099029651472, 1.1344161671658552, 1.144824616096878, 1.1562006039600068, 1.170579050104907, 1.182391106268823, 1.1955402168885165, 1.206884239538475]
#
# g_60 = [1.341132610018089, 1.2659911241582358, 1.2035886596636267, 1.1708172636790994, 1.1561398573234807, 1.1436770710389081, 1.1317052049271368, 1.1274222806114065, 1.1285821737395423, 1.127971653336631, 1.1300819668561, 1.1321307120024686, 1.1398673955588796, 1.1494845094980195, 1.1605981721170235, 1.1708158459676445, 1.1837048285127494, 1.1976766702723973, 1.2119973989262878]
#
# g_65 = [1.3471556298906882, 1.2649090571012436, 1.1986857843291565, 1.1637527281361477, 1.15591808088952, 1.1458694767781865, 1.1329895881676237, 1.1334310761138808, 1.132821760604084, 1.1330366521507624, 1.1337336564657527, 1.1397284591310215, 1.1483878063147313, 1.1563230089784955, 1.1693411362534523, 1.1849717155918265, 1.1966259386381983, 1.2094113621789107, 1.2207339928834784]
#
# g_70 = [1.370951723367499, 1.2919959302306794, 1.220500403776995, 1.1723390430682719, 1.1525323196684172, 1.1381505125261873, 1.1272906560489802, 1.1238330441265516, 1.1213143290973904, 1.1234145983076858, 1.1287356544949656, 1.1336245388693766, 1.1399427122264696, 1.1497426451146155, 1.1637522562762053, 1.1797936025715192, 1.1922167950072868, 1.2052563112472627, 1.2201927828160581]
#
# g_75 = [1.3682948904235517, 1.284334348720807, 1.2116963637640494, 1.169036405618085, 1.1523462238289655, 1.1435864648247631, 1.1237020844219037, 1.1210606433196526, 1.1209326785425329, 1.12516310440022, 1.1356985593768987, 1.1368436160195479, 1.144091125097834, 1.152834513059199, 1.164823375981213, 1.1831330992857079, 1.199343002518373, 1.2104891742922448, 1.2245734481824382]
#
# g_80 = [1.3692348402665866, 1.2818160463963848, 1.2082568247518959, 1.1660183059567832, 1.1431359739083382, 1.1260179073125576, 1.1147720089692195, 1.1138084635333818, 1.1143662932047884, 1.116914460900265, 1.1230002225855238, 1.1334760707904867, 1.1429566378355906, 1.15444237978956, 1.160413452122778, 1.1801596989267327, 1.1915550080394903, 1.203273402911107, 1.2188934857944471]
#
# g_85 = [1.3691747406213777, 1.2809620152942027, 1.2038090674393438, 1.1603330154381852, 1.1388334197981878, 1.1212430016068697, 1.1091769611494682, 1.1067403531238975, 1.1069905186947544, 1.1104619860639557, 1.116466069214615, 1.1234154159496545, 1.1337773439066885, 1.146839670837008, 1.159700936286494, 1.1737510972449985, 1.1892569697620805, 1.204423330637274, 1.2182934121953395]
#
# g_90 = [1.3655343122147252, 1.2773722106989345, 1.2007988420156623, 1.1568123827823056, 1.13515414266961, 1.1172861836586634, 1.104544690593743, 1.102018185286317, 1.102293325809926, 1.104704293930277, 1.1108127057179094, 1.1183250817370722, 1.1290173778519246, 1.1418617015188317, 1.1558236787480196, 1.1714936150000623, 1.1874890028541838, 1.2015711126529627, 1.2153471082650065]
#
# g_95 = [1.3608111439581356, 1.2725352357694224, 1.1966643482827628, 1.1535565629430469, 1.1318177696100389, 1.1142324217501909, 1.101408427159838, 1.0980969992697276, 1.0980270396640368, 1.0998249420642585, 1.1050640940942367, 1.1130534589359764, 1.1237139451611449, 1.1362009536923077, 1.1514049634823824, 1.1668500923982235, 1.1829036612010013, 1.1982819244942546, 1.212471588238841]
#
# g_10 =[1.3551321352363475, 1.2668219324671914, 1.1920452219155393, 1.150021222421083, 1.1278059736075372, 1.111083113229618, 1.0981975511392197, 1.0943934690318156, 1.0939824961040638, 1.0957136748182534, 1.1007519959380407, 1.1085687744393282, 1.1194986500435427, 1.1327194696009921, 1.1477778166313155, 1.16386467160241, 1.179884081275511, 1.1953769621992856, 1.209413249831017]

# num = [g_0, g_05, g_1, g_15, g_20, g_25, g_30, g_35, g_40, g_45, g_50, g_55, g_60, g_65, g_70, g_75, g_80, g_85, g_90, g_95, g_10]
# g = [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]
# W = [0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66]
#
# for i = 1:21
#     scatter!(W, num[i], label = "g = $(g[i])")
# end

#g = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]
#g_a = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
#W = [0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66]
# g_a = fill(0, 20)
# g_b = fill(0.5, 20)


#scatter(g_a, W, g_0)
#scatter(g_b, W, g_05)


# W = [0.1, 0.2, 0.3, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5]
# #
# #W = [0.57, 0.57, 0.57, 0.56, 0.56, 0.56, 0.57, 0.57, 0.57, 0.57, 0.57, 0.56, 0.55, 0.56, 0.56, 0.56, 0.55, 0.55, 0.55, 0.56, 0.56]
# g = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]
# #z = [1.2987002600528104, 1.2928713301826134, 1.2768893656494813, 1.250909880831278, 1.226423870327144, 1.2039384504007167, 1.1886177058221372, 1.1662169834270841, 1.1470909534964302, 1.1291615541610245, 1.1221758948926999, 1.117601133590725, 1.1274222806114065, 1.132821760604084, 1.1213143290973904, 1.1209326785425329, 1.1138084635333818, 1.1067403531238975, 1.102018185286317, 1.0980270396640368, 1.0939824961040638]
# #G = [g_0, g_05, g_1, g_15, g_20, g_25, g_30, g_35, g_40, g_45, g_50, g_55, g_60, g_65, g_70, g_75, g_80, g_85, g_90, g_10]
# array = real(load("/home/kyle/GPE-Data/8-13-20/Spread_L=89_g=$(g[i])_W=$(W[j])_gauss-1_avg_SOC.jld", "data"))
# # scatter(W, g, z)
#
# #[0.57, 0.57, 0.57, 0.56, 0.56, 0.56, 0.57, 0.57, 0.57, 0.57, 0.57, 0.56, 0.55, 0.56, 0.56, 0.56, 0.55, 0.55, 0.55, 0.56, 0.56]
# #matrix = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0; 0.57, 0.57, 0.57, 0.56, 0.56, 0.56, 0.57, 0.57, 0.57, 0.57, 0.57, 0.56, 0.55, 0.56, 0.56, 0.56, 0.55, 0.55, 0.55, 0.56, 0.56; 1.2987002600528104, 1.2928713301826134, 1.2768893656494813, 1.250909880831278, 1.226423870327144, 1.2039384504007167, 1.1886177058221372, 1.1662169834270841, 1.1470909534964302, 1.1291615541610245, 1.1221758948926999, 1.117601133590725, 1.1274222806114065, 1.132821760604084, 1.1213143290973904, 1.1209326785425329, 1.1138084635333818, 1.1067403531238975, 1.102018185286317, 1.0980270396640368, 1.0939824961040638 ]
#
# scatter()
#
# for i in 1:length(g)
#     for j in 1:length(W)
#         scatter!(W[1:length(G[i])], fill(g[i], length(G[i])), series_annotations = text.(round.(G[i], digits = 3), :bottom, 10), legend = false, title = "2/z L=89 del_t = 0.001", xlabel = "W", ylabel = "g")
#     end
# end

# plot!(size = (1000, 700))
# #scatter(W, g, z, xlabel = "W", ylabel = "g", zlabel = "2/z", title = "2/z L=89, t = 300, del_t = 0.001", legend = false)
#
for i = 1:length(g)
    n = g[i]
    array = load("/home/kyle/GPE-Data/10-31-20/Spread_2-z.jld", "data")
    plot(g, W, array; st = :heatmap, color = :grays, ratio = 1, ylims = (0,3.5), xlabel="g", ylabel="W", title="2/z L=89")
end

heatmap!()

#array = load("/home/kyle/GPE-Data/10-31-20/Spread_2-z.jld")
